package nl.kabisa.spring.boot.starter.service.problem;

import lombok.*;
import org.springframework.http.MediaType;

import jakarta.validation.Valid;
import jakarta.validation.constraints.DecimalMax;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotNull;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * A standard problem detail definition according to https://tools.ietf.org/html/rfc7807.
 * <p>
 * This class implements multiple Problem types in one type, because it's easier to map the problem instances then.
 * - Problem (The default when no specific type is provided, url is about:blank)
 * - TraceableProblem
 * - ConstraintViolations
 *
 * @author Mark Spreksel
 */
@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class Problem {

    public static final String TYPE_PROBLEM = "default";
    public static final String TYPE_TRACEABLE_PROBLEM = "traceable-problem";
    public static final String TYPE_CONSTRAINT_VIOLATIONS = "constraint-violation";

    /**
     * The 'application/problem+json' media type as string.
     */
    public static final String PROBLEM_JSON = "application/problem+json";

    /**
     * The 'application/problem+json' media type.
     */
    public static final MediaType MEDIA_TYPE_PROBLEM_JSON = MediaType.valueOf(PROBLEM_JSON);

    /**
     * identifies the problem type.
     * <p>
     * Example: traceable-problem
     * Default: "default"
     */
    @Builder.Default
    private String type = TYPE_PROBLEM;

    /**
     * A short, summary of the problem type. Written in english and readable for engineers
     * (usually not suited for non technical stakeholders and not localized)
     * <p>
     * Example: Service Unavailable
     */
    @NotNull
    private String title;

    /**
     * The HTTP status code generated by the originating service for this occurrence of the problem.
     * <p>
     * Minimum value: 100
     * Maximum value: 600 (exclusive)
     * <p>
     * Example: 503
     */
    @NotNull
    @DecimalMin("100")
    @DecimalMax(inclusive = false, value = "600")
    private Integer status;

    /**
     * A human-readable explanation specific to this occurrence of the problem.
     * <p>
     * Example: Connection to database timed out
     */
    private String detail;

    /**
     * An absolute or relative URI that identifies the specific occurrence of the problem.
     * It may or may not yield further information if dereferenced.
     * <p>
     * Example: /account/12345/msgs/abc
     */
    private String instance;

    /**
     * A universally unique identifier of the problem.
     * <p>
     * Example: 86e43f74-a86f-445a-ace7-d6e7ed1c90d0
     */
    private UUID id;

    /**
     * A standardized error code, the standardized error codes we think we need must be documented (Wiki, for instance),
     * so they can be reused.
     * <p>
     * Example: CannotConnectToHost
     */
    private String code;

    /**
     * The 'violations' property. This is a list with validation messages
     * <p>
     * Default: new ArrayList<>()
     */
    @Valid
    @Builder.Default
    @Setter(AccessLevel.NONE)
    private List<ConstraintViolation> violations = new ArrayList<>();

}
